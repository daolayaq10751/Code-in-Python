import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# Parámetros globales
bins = np.arange(500000, 1500001, 10000)
umbral_principal = 1000000

# Posición de umbrales con valores decimales permitidos
umbrales_por_año = {
    2008: {'debajoUmbral': 1, 'despuesUmbral': 4.5},
    2009: {'debajoUmbral': 5, 'despuesUmbral': 8.6},
    2010: {'debajoUmbral': 6, 'despuesUmbral': 6},
    2011: {'debajoUmbral': 4, 'despuesUmbral': 8.7},
    2012: {'debajoUmbral': 2, 'despuesUmbral': 0.6}
}

# Función para trazar las líneas de tendencia y distribución contrafactual
def trazar_histograma(ax, year, df, bins, umbral_principal):
    patr_column = f'PATR_L_{year}'
    df_filtered = df[(df[patr_column] >= 500000) & (df[patr_column] <= 1500000)]

    # Cálculo de los valores para la línea de tendencia
    counts, bin_edges = np.histogram(df_filtered[patr_column], bins=bins)

    # Centros de las barras
    bin_centers = 0.5 * (bin_edges[1:] + bin_edges[:-1])

    # Ajuste de regresión para obtener la distribución contrafactual
    X = np.column_stack([bin_centers**i for i in range(1, 5)])  # Polinomio de grado 5
    y = counts

    reg = LinearRegression().fit(X, y)
    counterfactual = reg.predict(X)  # Predicción de la distribución contrafactual

    # Graficar la línea de tendencia
    ax.plot(bin_centers, counts, color='#444444', marker='.', linestyle='-', linewidth=1.5, markersize=6, label="Línea de Tendencia")

    # Graficar la línea de distribución contrafactual (ajustada)
    ax.plot(bin_centers, counterfactual, color='blue', linestyle='-', linewidth=2, label="Distribución Contrafactual", alpha=0.5)

    # Graficar la línea del umbral principal
    ax.axvline(x=umbral_principal, color='red', linestyle='--', linewidth=2.5, alpha=0.7, label=f"Umbral Principal: {int(umbral_principal / 1000)}M")

    # Calcular las posiciones exactas de los umbrales, con decimales
    bin_width = bin_edges[1] - bin_edges[0]
    umbral_idx = np.searchsorted(bin_centers, umbral_principal)

    # Calcular las posiciones de los umbrales (debajo y después) con interpolación correcta
    debajo_Umbral = bin_centers[umbral_idx] - (umbrales_por_año[year]['debajoUmbral'] * bin_width)
    despues_Umbral = bin_centers[umbral_idx] + (umbrales_por_año[year]['despuesUmbral'] * bin_width)

    # Graficar las líneas para los umbrales antes y después
    ax.axvline(x=debajo_Umbral, color='grey', linestyle='--', linewidth=1.5, label=f"Umbral $W_r^l$: {debajo_Umbral:.2f}")
    ax.axvline(x=despues_Umbral, color='grey', linestyle='--', linewidth=1.5, label=f"Umbral $W_r^n$: {despues_Umbral:.2f}")

    # Título, etiquetas y leyenda
    ax.set_title(f"Distribución de Firmas - Año {year}", fontsize=14, fontweight='bold')
    ax.set_xlabel("Patrimonio Líquido (Millones de pesos COP)", fontsize=12)
    ax.set_ylabel("Concentración de Firmas", fontsize=12)

    # Etiquetas del eje X
    ax.set_xticks(np.arange(500000, 1500001, 100000))
    ax.set_xticklabels([f"{i}M" for i in range(500, 1501, 100)])

    # Añadir leyenda
    ax.legend()

    # Cuadrícula para mejorar visualización
    ax.grid(axis='y', linestyle='--', alpha=0.7)

# Crear los subgráficos
fig, axes = plt.subplots(3, 2, figsize=(18, 15))
axes = axes.flatten()

# Graficar para cada año
for idx, year in enumerate(range(2008, 2013)):
    trazar_histograma(axes[idx], year, df_merged_final2, bins, umbral_principal)

# Eliminar la última subgráfica vacía
axes[-1].axis('off')

plt.tight_layout()
plt.show()


